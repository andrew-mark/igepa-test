@mixin min-respond-to($name) {
  @if not map-has-key($breakpoints, $name) {
    @warn "Warning: `#{$name}` is not a valid breakpoint name.";
  }

  @else {
    @media (min-width: map-get($breakpoints, $name)) {
      @content;
    }
  }
}

@mixin max-respond-to($name) {
  @if not map-has-key($breakpoints-max, $name) {
    @warn "Warning: `#{$name}` is not a valid breakpoint name.";
  }

  @else {
    @media (max-width: map-get($breakpoints-max, $name)) {
      @content;
    }
  }
}

@mixin respond-to-min-max($min-name, $max-name) {
  @if not map-has-key($breakpoints, $min-name) or map-has-key($breakpoints-max, $max-name) {
    @warn "Warning: `#{$min-name} #{$max-name}` is not a valid breakpoint name.";
  }

  @else {
    @media (min-width: map-get($breakpoints, $min-name)) and (max-width: map-get($breakpoints-max, $max-name)) {
      @content;
    }
  }
}

@mixin grid-wrapper {
  margin-left: auto;
  margin-right: auto;
  max-width: $grid-max-content-width;
  padding-left: $grid-wrapper-padding-default;
  padding-right: $grid-wrapper-padding-default;
  width: 100%;

  &:after {
    clear: both;
    content: '';
    display: table;
  }
}

@mixin grid-container {
  $margin: $grid-gutters / -2;

  display: flex;
  flex: 1 1 auto;
  flex-flow: row wrap;
  margin-left: $margin;
  margin-right: $margin;
  min-width: 100%;
  position: relative;
}

@mixin grid-cell($columns: 0, $total-columns: $grid-columns) {
  $padding: $grid-gutters / 2;

  flex: 0 0 auto;
  padding-left: $grid-wrapper-padding-default;
  padding-right: $grid-wrapper-padding-default;
  position: relative;

  @if $columns > 0 {
    @include grid-cell-size($columns, $total-columns);
  }
}

@mixin grid-cell-absolute(
  $columns: 0,
  $total-columns: $grid-columns
) {
  $padding: $grid-gutters / 2;

  flex: 0 0 auto;
  padding-left: $padding;
  padding-right: $padding;
  position: absolute;

  @if $columns > 0 {
    @include grid-cell-size($columns, $total-columns);
  }
}

@function grid-pre($columns: 1, $total-columns: $grid-columns) {
  @return $columns / $total-columns * 100%;
}

@mixin grid-pre($columns: 1, $total-columns: $grid-columns) {
  margin-left: grid-pre($columns, $total-columns);
}

@function grid-post($columns: 1, $total-columns: $grid-columns) {
  @return $columns / $grid-columns * 100%;
}

@mixin grid-post($columns: 1, $total-columns: $grid-columns) {
  margin-right: grid-post($columns, $total-columns);
}

@mixin grid-cell-size($columns: 1, $total-columns: $grid-columns) {
  $width: grid-cell-size($columns, $total-columns);

  max-width: $width;
  width: $width;
}

@function grid-cell-size($columns: 1, $total-columns: $grid-columns) {
  @return $columns / $total-columns * 100%;
}

@mixin size-grid-cell($columns: 1, $total-columns: $grid-columns) {
  $width: grid-cell-size($columns, $total-columns);

  max-width: $width;
  width: $width;
}

@mixin image-aspect-lock($width: 400, $height: 300, $element: 'img', $fit: cover) {
  $padding: $height / $width * 100%;

  display: block;
  height: auto;
  overflow: hidden;
  padding: $padding 0 0 0;
  position: relative;
  width: 100%;

  @if $element == 'div' {
    > div {
      bottom: 0;
      display: block;
      height: 100%;
      left: 50%;
      max-width: 100%;
      position: absolute;
      right: 0;
      top: -50%;
    }
  } @else {
    img {
      bottom: 0;
      display: block;
      height: 100%;
      left: 0;
      max-width: 100%;
      object-fit: $fit;
      position: absolute;
      right: 0;
      top: 0;
    }
  }
}

@mixin svg-scaling-icon($padding_bottom: 92%) {
  .d-Icon {
    padding-bottom: $padding_bottom;
    position: relative;
    width: 100%;

    .d-Symbol {
      height: 100%;
      position: absolute;
      width: 100%;
    }
  }
}

@function get-z($layer) {
  @return index($z-layers, $layer);
}
